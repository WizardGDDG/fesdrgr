#include <iostream>
#include <cmath>
#include <iomanip>
#include <functional> 
#include <tuple>     
#include <limits>    

using namespace std;


tuple<double, int> bisectionMethod(function<double(double)> f, double a, double b, double tolerance, int maxIterations) 
{
    if (f(a) * f(b) >= 0) 
    {
        cerr << "Ошибка: Функция не меняет знак на интервале." << endl;
        return { numeric_limits<double>::quiet_NaN(), -1 }; 
    }

    int iterations = 0;
    double c;
    while ((b - a) / 2.0 > tolerance && iterations < maxIterations) 
    {
        c = (a + b) / 2.0;
        if (f(c) == 0) 
        {
            break;
        }
        else if (f(a) * f(c) < 0) 
        {
            b = c;
        }
        else 
        {
            a = c;
        }
        iterations++;
    }
    return { c, iterations }; 
}



tuple<double, int> simpleIterationMethod(function<double(double)> g, double initialGuess, double tolerance, int maxIterations) {
    double x0 = initialGuess;
    double x1;
    int iterations = 0;

    while (iterations < maxIterations) 
    {
        x1 = g(x0);
        if (abs(x1 - x0) < tolerance) 
        {
            break;
        }
        x0 = x1;
        iterations++;
    }
    if (iterations == maxIterations)
    {
        cerr << "Метод простых итераций не сошелся за " << maxIterations << " итераций." << endl;
    }
    return { x1, iterations }; 
}


void solveEquationB() 
{
    
    auto f = [](double x) { return pow(2, -x) - sin(x); };

    
    // 2^-x = sin(x)  => -x = log2(sin(x)) => x = -log2(sin(x))
    auto g = [](double x) { return -log2(sin(x)); };


    double a = 0.0;
    double b = 2.0; 
    double toleranceBisection = 1e-5;
    double initialGuessSimple = 0.5;
    double toleranceSimple = 1e-6;
    int maxIterations = 1000;

    cout << "Решение уравнения 2^-x = sin(x):" << endl;
    
    auto [rootBisection, iterationsBisection] = bisectionMethod(f, a, b, toleranceBisection, maxIterations);

    if (!isnan(rootBisection)) 
    {
        if (rootBisection < 10) 
        {
            cout << "Метод половинного деления:" << endl;
            cout << "Корень: " << fixed << setprecision(10) << rootBisection << endl;
            cout << "Количество итераций: " << iterationsBisection << endl;
        }
        else 
        {
            cout << "Корень методом половинного деления не подходит условию x<10" << endl;
        }
    }


    
    auto [rootSimple, iterationsSimple] = simpleIterationMethod(g, initialGuessSimple, toleranceSimple, maxIterations);
    if (!isnan(rootSimple)) 
    {
        if (rootSimple < 10) 
        {
            cout << "\nМетод простых итераций:" << endl;
            cout << "Корень: " << fixed << setprecision(10) << rootSimple << endl;
            cout << "Количество итераций: " << iterationsSimple << endl;
        }
        else 
        {
            cout << "Корень методом простых итераций не подходит условию x<10" << endl;
        }
    }


}



int main() 
{
    setlocale(LC_ALL, "RUS");
    solveEquationB();
    return 0;
}
