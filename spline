
#include <iostream>
#include <vector>
#include <cmath>
#include <string>
#include <algorithm>
#include <sstream>
#include <stdexcept>

using namespace std; 


string doubleToString(double value, int precision) 
{
    stringstream ss;
    ss.precision(precision);
    ss << fixed << value;
    return ss.str();
}


int maxStringLength(const vector<string>& strings) 
{
    int maxLength = 0;
    for (const auto& str : strings) 
    {
        maxLength = max(maxLength, (int)str.length());
    }
    return maxLength;
}


string formatOutput(double value, int precision, int fieldWidth) 
{
    string strValue = doubleToString(value, precision);
    int padding = fieldWidth - strValue.length();
    if (padding > 0) 
    {
        return string(padding, ' ') + strValue;
    } else 
    {
        return strValue;
    }
}


void printMatrix(const vector<vector<double>>& matrix, int precision = 2, int fieldWidth = 8) 
{
    int rows = matrix.size();
    if (rows == 0) {
        return;
    }
    int cols = matrix[0].size();

    for (int i = 0; i < rows; ++i) 
    {
        vector<string> rowStrings;
        for (int j = 0; j < cols; ++j) 
        {
            rowStrings.push_back(doubleToString(matrix[i][j], precision));
        }

        int maxLength = maxStringLength(rowStrings);

        for (int j = 0; j < cols; ++j) 
        {
           cout << formatOutput(matrix[i][j], precision, fieldWidth) << " ";
        }
        cout << endl;
    }
    cout << endl;
}


bool forwardElimination(vector<vector<double>>& matrix) 
{
    int n = matrix.size();
    for (int i = 0; i < n; ++i) 
    {
        
        int maxRow = i;
        for (int k = i + 1; k < n; ++k) 
        {
            if (abs(matrix[k][i]) > abs(matrix[maxRow][i])) 
            {
                maxRow = k;
            }
        }

         
        if (abs(matrix[maxRow][i]) < 1e-10) 
        {
          return false; 
        }

        
        if (maxRow != i) 
        {
            swap(matrix[i], matrix[maxRow]);
        }

        
        for (int k = i + 1; k < n; ++k) 
        {
            double factor = matrix[k][i] / matrix[i][i];
            for (int j = i; j <= n; ++j) 
            {
                matrix[k][j] -= factor * matrix[i][j];
            }
        }
    }
    return true;
}


vector<double> backSubstitution(const vector<vector<double>>& matrix) 
{
    int n = matrix.size();
    vector<double> solution(n);

    for (int i = n - 1; i >= 0; --i) 
    {
        solution[i] = matrix[i][n]; 
        for (int j = i + 1; j < n; ++j) 
        {
            solution[i] -= matrix[i][j] * solution[j];
        }
        solution[i] /= matrix[i][i];
    }
    return solution;
}

int main() 
{
    setlocale(LC_ALL, "ru"); 

    int n;
    cout << "Введите размерность системы уравнений (n): ";
    cin >> n;

    vector<vector<double>> augmentedMatrix(n, vector<double>(n + 1));

    cout << "Введите расширенную матрицу (коэффициенты и свободные члены):" << endl;
    for (int i = 0; i < n; ++i) 
    {
        for (int j = 0; j <= n; ++j) 
        {
            cin >> augmentedMatrix[i][j];
        }
    }

    cout << "Исходная расширенная матрица:" << endl;
    printMatrix(augmentedMatrix);

     if (!forwardElimination(augmentedMatrix)) 
     {
        cout << "Система уравнений не имеет единственного решения (матрица вырождена)." << endl;
        return 1;
    }

    cout << "Матрица после прямого хода:" << endl;
    printMatrix(augmentedMatrix);

    vector<double> solution = backSubstitution(augmentedMatrix);

    cout << "Решение системы уравнений:" << endl;
    for (int i = 0; i < n; ++i) 
    {
        cout << "x" << i + 1 << " = " << doubleToString(solution[i],4) << endl;
    }

    return 0;
}
